__xx_refresh_1password_keychain_entry() {
    KEYCHAIN_SERVICE="op-session"
    OP_USER_UUID=$(op account list --format json | jq -r '.[0].user_uuid')
    ENTRY_NAME="${KEYCHAIN_SERVICE}-${OP_USER_UUID}"

    get_keychain_token() {
        security find-generic-password -s "${ENTRY_NAME}" -w 2>/dev/null || true
    }

    get_keychain_date() {
        security find-generic-password -s "${ENTRY_NAME}" -g 2>&1 | \
            grep '"cdat"<timedate>=' | \
            sed -E 's/^.*"cdat"<timedate>=[^"]+"([^"]+)\\?0*".*$/\1/' || true
    }
    generate_op_token() {
        OP_ACCOUNT_DETAILS_JSON=$(op account list --format json)
        echo "Generating new token..."
        PASSWORD=$(osascript <<EOF
tell application "System Events"
    display dialog "Enter the password for $(echo ${OP_ACCOUNT_DETAILS_JSON} | jq -r '.[].email') at $(echo ${OP_ACCOUNT_DETAILS_JSON} | jq -r '.[].url'):" default answer "" with hidden answer with title "1password CLI Authentication"
    set thePassword to text returned of result
end tell
return thePassword
EOF
)
        SIGNIN_OUTPUT=$(echo ${PASSWORD} | op signin -f --raw)
        if [ -z "${SIGNIN_OUTPUT}" ]; then
            echo "Login failed"
        else {
            security add-generic-password -U -a "${OP_USER_UUID}" -s "${ENTRY_NAME}" -w "${SIGNIN_OUTPUT}" >/dev/null
            echo "Stored new token in keychain"
            eval "export OP_SESSION_${OP_USER_UUID}=\"${SIGNIN_OUTPUT}\""
        }
        fi
    }
    TOKEN="$(get_keychain_token)"
    if [[ -n "${TOKEN}" ]]; then
        CREATION_DATE="$(get_keychain_date)"
        if [[ -n "${CREATION_DATE}" ]]; then
            CREATED_EPOCH=$(gdate -u -d "${CREATION_DATE:0:4}-${CREATION_DATE:4:2}-${CREATION_DATE:6:2} ${CREATION_DATE:8:2}:${CREATION_DATE:10:2}:${CREATION_DATE:12:2}" +"%s")
            NOW_EPOCH=$(date +%s)
            ENTRY_AGE=$(( (NOW_EPOCH - CREATED_EPOCH) / 60 ))
            if (( ENTRY_AGE < 30 )); then
                echo "Using cached token (age: ${ENTRY_AGE}m)"
                eval "export OP_SESSION_${OP_USER_UUID}=\"${TOKEN}\""
            else
                echo "Token expired (age: ${ENTRY_AGE}m), removing..."
                security delete-generic-password -s "${ENTRY_NAME}" >/dev/null 2>&1 || true
                generate_op_token
            fi
        fi
    else
        generate_op_token
    fi
}
