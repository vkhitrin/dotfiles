__xx_cache_github_notifications_to_sqlite() {
    source ~/.zshrc.d/xx_functions/__xx_setup_commands
    source ~/.zshrc.d/xx_functions/__xx_format_columns_ansi
    __xx_setup_commands
    source ~/.zshrc.d/xx_functions/__xx_notify
    if [ -z "${XX_CACHE_DIR}" ]; then
        __xx_notify "Environment variable XX_CACHE_DIR is not defined, quitting"
        return 1
    fi

    __xx_notify "#[fg=bold]Starting to fetch GitHub Notifications!#[default]"

    __xx_notify "Ensuring ${XX_CACHE_DIR} directory exists"
    mkdir -p "${XX_CACHE_DIR}"
    SQLITE_DATABASE_PATH="${XX_CACHE_DIR}/github.db"

    __xx_notify "Checking if authenticated with GitHub"
    if ! gh auth status > /dev/null 2>&1; then
        __xx_notify "Failed to contact or not authenticated with GitHub"
        return 1
    fi

    __xx_notify "Creating 'Notifications' table if not exists in SQLITE database"
    sqlite3 "${SQLITE_DATABASE_PATH}" "CREATE TABLE IF NOT EXISTS Notifications (id TEXT PRIMARY KEY, json TEXT);"
    if [ -n "${SQLITE_WIPE_DATA}" ]; then
        __xx_notify "Wipe table data"
        sqlite3 "${SQLITE_DATABASE_PATH}" "DELETE FROM Notifications;"
    fi
    # Fetch notifications
    gh api --paginate  --method GET '/notifications?per_page=50&all=true' |
    jq -c '.[]' | while read -r row; do
      id=$(echo "$row" | jq -r '.id')
      sqlite3 "${SQLITE_DATABASE_PATH}" \
        "INSERT OR REPLACE INTO Notifications (id, json) VALUES ('$id', '$row');"
    done

    __xx_notify "Creating 'SyncLog' table if not exists in SQLITE database"
    sqlite3 "${SQLITE_DATABASE_PATH}" "CREATE TABLE IF NOT EXISTS SyncLog (operation TEXT PRIMARY KEY, sync_timestamp TEXT NOT NULL);"
    # Insert or replace sync timestamp into SyncLog table
    SYNC_TIMESTAMP=$(${XX_GNU_DATE_COMMAND} -u +"%Y-%m-%dT%H:%M:%SZ")
    sqlite3 "${SQLITE_DATABASE_PATH}" "INSERT OR REPLACE INTO SyncLog (operation, sync_timestamp) VALUES ('notifications', '$SYNC_TIMESTAMP');"

    __xx_notify "#[fg=bold]Finished fetching GitHub Notifications!#[default]"
}
